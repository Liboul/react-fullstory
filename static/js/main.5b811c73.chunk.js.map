{"version":3,"sources":["index.js"],"names":["ReactDOM","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","min","max","cookieOrgId","Cookies","get","_useState","useState","_useState2","Object","_Users_cereallarceny_Dropbox_Development_moonshot_code_new_fullstory_examples_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","orgId","setOrgId","userId","concat","Math","floor","random","Fragment","onSubmit","event","preventDefault","set","window","location","reload","placeholder","type","name","value","onChange","target","react_fullstory__WEBPACK_IMPORTED_MODULE_3___default","org","debug","onClick","data","FullStoryAPI","identifyAs","displayName","email","havingFun","document","getElementById"],"mappings":"4MA2EAA,IAASC,OAAOC,EAAAC,EAAAC,cApEJ,WACV,IAHYC,EAAKC,EAGXC,EAAcC,IAAQC,IAAI,oBADhBC,EAEUC,mBAASJ,GAFnBK,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETK,EAFSH,EAAA,GAEFI,EAFEJ,EAAA,GAGVK,EAAM,QAAAC,QALAb,EAKgB,EALXC,EAKc,IALNa,KAAKC,MAAMD,KAAKE,UAAYf,EAAMD,EAAM,GAAKA,KAmBtE,OACEH,EAAAC,EAAAC,cAAA,YACIG,GACAL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACEpB,EAAAC,EAAAC,cAAA,iFAGAF,EAAAC,EAAAC,cAAA,QAAMmB,SAfO,SAAAC,GACnBA,EAAMC,iBAENjB,IAAQkB,IAAI,mBAAoBX,GAEhCY,OAAOC,SAASC,WAWR3B,EAAAC,EAAAC,cAAA,SACE0B,YAAY,kBACZC,KAAK,OACLC,KAAK,QACLC,MAAOlB,EACPmB,SAAU,SAAAV,GAAK,OAAIR,EAASQ,EAAMW,OAAOF,UAE3C/B,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,SAASE,MAAM,WAIhC1B,GACCL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACEpB,EAAAC,EAAAC,cAAA,oFAIAF,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAWkC,IAAK9B,EAAa+B,OAAO,IACpCpC,EAAAC,EAAAC,cAAA,wFAIAF,EAAAC,EAAAC,cAAA,UACEmC,QAAS,kBA3CA,SAACtB,EAAQuB,GAC1BC,uBAAa,WAAYxB,EAAQuB,GA2CvBE,CAAWzB,EAAQ,CACjB0B,YAAW,aAAAzB,OAAeD,GAC1B2B,MAAK,QAAA1B,OAAUD,EAAV,gBACL4B,WAAW,MALjB,YASY5B,GAEZf,EAAAC,EAAAC,cAAA,0FAUM,MAAS0C,SAASC,eAAe","file":"static/js/main.5b811c73.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport FullStory, { FullStoryAPI } from 'react-fullstory';\nimport Cookies from 'js-cookie';\n\nconst rand = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\nconst App = () => {\n  const cookieOrgId = Cookies.get('fullstory-org-id');\n  const [orgId, setOrgId] = useState(cookieOrgId);\n  const userId = `user_${rand(1, 100000)}`;\n\n  const identifyAs = (userId, data) => {\n    FullStoryAPI('identify', userId, data);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    Cookies.set('fullstory-org-id', orgId);\n\n    window.location.reload();\n  };\n\n  return (\n    <div>\n      {!cookieOrgId && (\n        <>\n          <p>\n            Start by entering your FullStory organization ID and hitting \"Save\".\n          </p>\n          <form onSubmit={handleSubmit}>\n            <input\n              placeholder=\"Organization ID\"\n              type=\"text\"\n              name=\"orgId\"\n              value={orgId}\n              onChange={event => setOrgId(event.target.value)}\n            />\n            <input type=\"submit\" value=\"Save\" />\n          </form>\n        </>\n      )}\n      {cookieOrgId && (\n        <>\n          <p>\n            Awesome! FullStory is now tracking... you should open your console\n            now.\n          </p>\n          <FullStory org={cookieOrgId} debug={true} />\n          <p>\n            If you want to identify yourself as a randomly generated user, do so\n            below:\n          </p>\n          <button\n            onClick={() =>\n              identifyAs(userId, {\n                displayName: `Test user ${userId}`,\n                email: `test_${userId}@example.com`,\n                havingFun: true\n              })\n            }\n          >\n            Identify {userId}\n          </button>\n          <p>\n            You can clear your cookies and begin this whole process again as you\n            like.\n          </p>\n        </>\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}